Windows Commands, PowerShell and Netsh example commands

Generic Windows command prompt:
ipconfig /all
netstat -rn
ping
tracert
nslookup

Windows PowerShell Cmdlets:
Use PowerShell for Windows (ISE or PowerShell) - use the get-help cmdlet if you are not sure about a command syntax or format

General network PowerShell commands:
Get-NetAdapter 
Set-NetAdapter 
Disable-NetAdapter 
Enable-NetAdapter 
Rename-NetAdapter 
Restart-NetAdapter 
Get-NetIPInterface 
Set-NetIPInterface 
Get-NetIPAddress 
New-NetIPAddress 
Set-NetIPAddress 
Remove-NetIPAddress 
Get-NetIPConfiguration 
Get-NetRoute 
New-NetRoute 
Remove-NetRoute 
Get-DnsClientServerAddress 
Set-DnsClientServerAddress
Resolve-DnsName
Get-NetAdapter 
Set-NetAdapter 
Disable-NetAdapter 
Enable-NetAdapter 
Rename-NetAdapter 
Restart-NetAdapter

PowerShell commands for setting up IPv6:
Get-NetIPAddress -InterfaceIndex 2
New-NetIPAddress -InterfaceIndex 2 -IPAddress 2001:db8:302:101::10 -PrefixLength 64 -DefaultGateway 2001:db8:302:101::1 - whatif
Set-NetIPAddress
Remove-NetIpAddress -InterfaceIndex 2 -IPAddress 2001:db8:302:101::10 -PrefixLength 64 -DefaultGateway 2001:db8:302:101::1 - whatif


PowerShell commands for setting up IPv6 addresses on interfaces:
Get-NetIPv6Protocol
Set-NetIPv6Protocol

PowerShell commands for turning on and off an interface:
Disable-NetAdapter -Name "Wi-Fi" -Confirm:$false 
Enable-NetAdapter -Name "Wi-Fi" -Confirm:$false

PowerShell commands for turning on and off privacy addressing (randomizing):
Set-NetIPv6Protocol –RandomizeIdentifiers Disabled
Set-NetIPv6Protocol –RandomizeIdentifiers Enabled

PowerShell commands for Prefix Policies:
Get-NetPrefixPolicy

PowerShell commands to disable tunneling:
Set-Net6to4Configuration -State Disabled
Set-NetIsatapConfiguration -State Disabled
Set-NetTeredoConfiguration -Type Disabled

PowerShell commands to configure NCSI:
Get-NCSIPolicyConfiguration
Set-NCSIPolicyConfiguration –CorporateWebsiteProbeURL http://ipv6.ncsi.example.com –PolicyStore HexaBuild
Reset-NCSIPolicyConfiguration –PolicyStore HexaBuild

PowerShell commands for DNS:
Get-DnsClientServerAddress
Set-DnsClientServerAddress
Resolve-DnsName

PowerShell DNS Server commands:
Add-WindowsFeature DNS
Get-WindowsFeature DNS
Add-DnsServerPrimaryZone
Add-DnsServerResourceRecordAAAA
Remove-DnsServerResourceRecord
Get-DnsServerGlobalQueryBlockList
Get-DnsServerRootHint
Import-DnsServerRootHint
Add-DnsServerRootHint
Remove-DnsServerRootHint
Get-DnsServerSetting
Test-DnsServer

Example DNS PowerShell cmdlet testing:
Resolve-DnsName –Name www.example.com –Type AAAA –Server 2001:db8:cafe:x0::53
Resolve-DnsName –Name www.cav6tf.org –Type AAAA –Server 2001:4860:4860::8888

Sample PowerShell cmdlets to resolve a hostname and find the route to that location:
$rn = Resolve-DnsName –Name <hostname> –Type AAAA
Find-NetRoute –RemoteIPAddress $rn.ip6address

PowerShell commands to set up IPv6 on an interface:
# - see if any existing IP addresses are assigned to interface 20 (Wi-Fi)
Get-NetIPAddress –InterfaceIndex 20

# - other commands
New-NetIPAddress 
Set-NetIPAddress 
Remove-NetIPAddress

# - turn on temporary addressing 
Set-NetIPv6Protocol -UseTemporaryAddresses Enabled

# - turn on privacy addressing
Set-NetIPv6Protocol -RandomizeIdentifiers Enabled

PowerShell commands to set up and modify routes:
Set-NetRoute
New-NetRoute
Remove-NetRoute
Get-NetRoute

 # - add an IPv6 route to the routing table 
New-NetRoute -DestinationPrefix 2600::/12 -InterfaceIndex 20 -NextHop fe80::5ef:b5a3:2ab1:54ce -Publish Yes -RouteMetric 256 

# - remove an IPv6 route to the routing table 
Remove-NetRoute -DestinationPrefix 2600::/12 –Confirm:$false


# - optionally build out DNS and DHCP install - for now just install the services on the Server - you can do it via the GUI or via PowerShell:
install-windowfeature DNS DHCP
# - make sure they installed
get-windowsfeature
# - look at dhcp first
get-command -module DHCPServer
# - need to figure out how to get the account roles installed and working without the Server Manager Wizard - not critical
# - display the windows management interface - refresh to show the DNS and DHCP services are there
# - add an IPv6 and IPv4 scope so our Windows8 computer can come up
# - IPv6 first
Add-DHCPServerv6Scope -Prefix 2001:db8:302:101:: -name client1-ipv6 -state Active -whatif
Add-DHCPServerv6ExclusionRange -Prefix 2001:db8:302:101:: -StartRange 2001:db8:302:101::1 -EndRange 2001:db8:302:101::256 -whatif
Set-DHCPServerv6PolicyOptions 
Get-DHCPServerv6Scope | Format-List *
# - notice anything odd about the range that was excluded? What are valid IPv6 addresses - like: 2001:db8:302:101::a - is that in the range?
# - see the hosts that are active in the IPv6 scope
Get-DHCPServerv6Binding
#
# - IPv4 commands for similar purpose (example - don't need for the labs)
Add-DHCPServerv4Scope -StartRange 10.10.1.16 -EndRange 10.10.1.31 -SubnetMask 255.255.255.0 -Name test1-ipv4 -whatif
Set-DhcpServerv4OptionValue -Dnsserver 8.8.8.8 -Router 10.10.1.254 -DNSDomain ipv4.example.com
#Set-DhcpServerv4OptionDefinition –OptionId 3 –DefaultValue 10.10.1.254 -Name "default gateway"
Get-DHCPServerv4Scope | Format-List *
Get-DHCPServerv4OptionValue
Get-DHCPServerv4Binding


# - DNS
# - Installing DNS
Add-WindowsFeature DNS
Get-WindowsFeature DNS
# - to modify the DNS listener IP address
Get-DnsServer | Export-Clixml -Path "c:\DnsServerConfig1.xml"
# - import the DNS listener file back in (it replaces the file)
$x = Import-Clixml "c:\DnsServerConfig1.xml"
Set-DnsServer -InputObject $x

# - IPv6 DNS resource entries
Add-DnsServerPrimaryZone
Add-DnsServerResourceRecordAAAA
Remove-DnsServerResourceRecord
# - build out the example.com zone
Add-DnsServerPrimaryZone -Name "example.com" -ZoneFile "example.com.dns"
# - build out an AAAA record
Add-DnsServerResourceRecordAAAA -Name "ipv6host" -ZoneName "example.com" -CreatePtr -AllowUpdateAny -IPv6Address "2001:db8:a::1" -TimeToLive 08:00:00
# - as an alternative do
Add-DnsServerResourceRecord -AAAA -Name "ipv6host" -ZoneName "example.com" -CreatePtr -AllowUpdateAny -IPv6Address "2001:db8:a::1" -TimeToLive 08:00:00
# - remove the record
Remove-DnsServerResourceRecord -name "ipv6host" -ZoneName "example.com" -RRType AAAA -Force
# - Get DNS query block list
Get-DnsServerGlobalQueryBlockList
# - Root Hint information
Get-DnsServerRootHint
Import-DnsServerRootHint
Add-DnsServerRootHint
Remove-DnsServerRootHint
# - example PowerShell cmdlet to see unique root level servers
Get-DnsServerRootHint | sort-object -property{$_.NameServer.RecordData.NameServer} -Unique
# - removing a.root-servers.net
Remove-DnsServerRootHint -NameServer "a.root-servers.net"
# - adding a new a.root-server.net entry
Add-DnsServerRootHint -NameServer "a.root-servers.net" -IPAddress 2001:503:ba3e::2:30
# - check for the change
Get-DnsServerRootHint | Where-Object {$_.NameServer.RecordData.NameServer -EQ "a.root-servers.net."} | Sort-Object -Unique
#
Get-DnsServerSetting
Test-DnsServer
# - example of testing DNS
Test-DnsServer -IPAddress ::1 -ZoneName "example.com"
# - check for the DNS Server module
Get-Command -Module DNSServer
#
# - DNS client settings
Get-DnsClientServerAddress
# - For IPv6 only
Get-DnsClientServerAddress -AddressFamily IPv6
# - set new DNS resolver server IPs
Set-DnsClientServerAddress -InterfaceIndex 4 -ServerAddresses("2001:4860:4860::8888","2001:4860:4860::8844")
# - check the DNS resolver settings
Get-DnsClientServerAddress -InterfaceIndex 4 -AddressFamily IPv6
# - test against the default DNS resolvers
Resolve-DnsName -Name www.cav6tf.org -Type AAAA
# - test against a specific DNS resolver
Resolve-DnsName -Name www.cav6tf.org -Type AAAA -Server 2001:4860:4860::8888
# - script to determine which interface a name resolver will use to connect to a resource
$rn = Resolve-DnsName -name www.cav6tf.org -type AAAA
Find-NetRoute -RemoteIPAddress $rn.ip6address
#
# - set up local DNS Transition - doesn't use the correct well known prefix so you have to 
Set-NetDnsTransitionConfiguration -State Enabled -LatencyMilliseconds 300 -AcceptInterface Ethernet -SendInterface Ethernet -PassThru -PrefixMapping 64:ff9b::/96
#

# multicast
# - mld vserion 2
Set-NetIPv6Protocol MldVersion=3
#
# netsh command
netsh interface ipv6 set global mldversion=version2
#
# - set igmp v2
Set-NetIPv6Protocol MldVersion=2
#
#
resolve-dnsname -name www.cav6tf.org -LlmnrOnly
#


Network Shell commands:
Only use Netsh for commands that are missing from PowerShell. There are very few at this point, only the multicast info and modifying the Prefix Policy table.

Netsh commands for turning on and off privacy addressing (randomizing):
netsh interface ipv6 set global randomizeidentifiers=disabled store=active
netsh interface ipv6 set global randomizeidentifiers=disabled store=persistent

Netsh commands for Prefix Policies:
netsh interface ipv6 show prefixpolicies
netsh interface ipv6 add prefixpolicy <prefix> <precedence> <label>
netsh interface ipv6 set prefixpolicy <prefix> <precedence> <label>
netsh interface ipv6 remove prefixpolicy <prefix> <precedence> <label>

Netsh commands to migrate from RFC 3484 to RFC 6724 behavior:
netsh int ipv6 add prefixpolicy 3ffe::/16 1 12 store=persistent
netsh int ipv6 add prefixpolicy fec0::/10 1 11 store=persistent
netsh int ipv6 add prefixpolicy fc00::/8 4 13 store=persistent
netsh int ipv6 add prefixpolicy fd00::/8 3 14 store=persistent
netsh int ipv6 add prefixpolicy ::/96 1 3 store=persistent
netsh int ipv6 add prefixpolicy ::ffff:0:0/96 35 4 store=persistent

Netsh commands to disable tunneling:
netsh interface 6to4 set state disabled
netsh interface isatap set state disabled
netsh interface teredo set state type = Disabled

Netsh multicast commands:
netsh interface ipv6 show joins <interface id>

# multicast
netsh interface ipv6 show joins
Get-NetIPAddress -AddressFamily ipv6 -InterfaceIndex 4 | ft
netsh interface ipv6 show joins interface=4
#

# if you want to do a command line packet capture:
pktmon.exe start -c -f tracefile.etl --pkt-size 0 --comp nics --flags 0x10


Reference demos - in case you need it:

 ----------------------------
# - Demo 1 run through script
# - show how to disable 6to4
# - first check the status
Get-Net6to4Configuration
# - note the state is Default
# - turn off 6to4
Set-Net6to4Configuration -State Disabled
# - same task with netsh for v2
netsh interface ipv6 6to4 set state disable
# - show the status
netsh interface ipv6 6to4 show state
#
#
# - show how to turn off isatap
# - first check the status
Get-NetIsatapConfiguration
# - note the state is Default
# - turn off ISATAP
Set-NetIsatapConfiguration -State Disabled
# - same task with netsh for v2
netsh interface isatap set state disable
# - show the status
netsh interface ipv6 isatap show state
#
#
# - show how to turn off teredo
# - first check the status
Get-NetTeredoConfiguration
# - note the state is Default
Set-NetTeredoConfiguration -Type Disabled
# - same task with netsh for v2
netsh interface teredo set state type=Disabled
# - show the status
netsh interface teredo show state
#

#
# - review through each of the powershell cmdlets if time permits:
Get-Net6to4Configuration | gm
Get-NetIsatapConfiguration | gm
Get-NetTeredoConfiguration | gm
#
#
# - get IP address, interface alias and prefix origin info
# - example get-netadapter formatted output for all up interfaces:
Get-NetAdapter | ? status -eq 'Up' | Get-NetIPAddress -ea 0 | ft ipaddress, interfaceindex, interfacealias, prefixorigin -a
#
# - show DHCP Lease status for IPv6 network
Get-DHCPServerv6Lease -Prefix 2001:db8:cafe:10:: | Format-List
# - switch to local Win8 client - show IPv6 address is in the DHCPv6 Lease info
gip
#
# - review through the IPv6 specific powershell cmdlets:
Get-NetIPv6Protocol | gm
get-help Get-NetIPv6Protocol -full
# - go through the specific parameter options
# - 
# - review through the IPv6 settings commands
get-help Set-NetIPv6Protocol -full
#
# ----------------------------
# - Demo 2 run through script
# - interface specific configurations
#     powershell for each interface type for firewall configuration - sequencing through those
#     focus is on best practice - which means turn the service off but firewall against it also
#     show RAGuard behavior via FW rules for servers if they will have static IPv6 addresses (recommended)
#     show why ICMPv6 is so important to allow through (PathMTU discovery)
# - Show network module NetTCPIP
Get-Module NetTCPIP | gm
# - Show how to test (ping, tracert, nslookup)
# - all the command prompt options work in powershell - demo them
# - first introduce test-connection -Quiet returns a boolean value (True/False)
Test-Connection 10.10.1.1 -Quiet
Test-Connection 2001:db8:302:101::1 -Quiet
# - next show all the specific TCP settings and what Transport filter options are available
Get-NetTCPSetting
# - next show the Transport filters
Get-NetTransportFilter
# - you can create a custome Transport filter using 
New-NetTransportFilter -SettingName Datacenter -DestinationPrefix 10.0.0.0/8
New-NetTransportFilter -SettingName Datacenter -DestinationPrefix 2001:db8:302:101::/64
#
# - might need to add additional testing / settings - not critical
#
# - next go over the advance firewall options
Get-NetFirewallRule | gm
# - firewall rules
# - netsh can be used also:
netsh advfirewall monitor show firewall rule name=all dir=in
# - powershell now
Get-NetFirewallRule
# - walk through the output of some of the firewall rules
#
# - sample creating new firewall rule
# - first example is blocking a specific application (not just a port)
New-NetFirewallRule -DisplayName “Block Outbound Telnet” -Direction Outbound -Program %SystemRoot%\System32\tlntsvr.exe –Protocol TCP –LocalPort 23 -Action Block –PolicyStore domain.contoso.com\gpo_name
# - second example is blocking a specific IPv4 address to prevent 6to4
New-NetFirewallRule -DisplayName "Block 6to4 Outbound" -Direction Outbound -Protocol 41 -RemoteAddress 192.88.99.1 -Action Block
# - example - allow TCP traffic addressed to port 12345 and the range of ports 5000-5020 to a specific application from the computers on the remote side of an edge (NAT) device, using the Teredo IPv6 interface
New-NetFirewallRule -DisplayName "Allow TCP 12345 and 5000-5020 over Teredo" -Direction Inbound -Action Allow -EdgeTraversalPolicy Allow -Protocol TCP -LocalPort 
    12345,5000-5020 -Program "C:\Program Files (x86)\TestIPv6App.exe"
#
#- IPv6 FW examples:
# - IPv6 FW rules to block 6to4 traffic
New-NetFirewallRule -DisplayName "Block 6to4 Outbound" -Direction Outbound -Protocol 41 -RemoteAddress 192.88.99.1 -Action Block
New-NetFirewallRule -DisplayName "Block 6to4 Outbound ICMP" -Direction Outbound -Protocol ICMPv4 -RemoteAddress 192.88.99.1 -Action Block
New-NetFirewallRule -DisplayName "Block 6to4 Inbound" -Direction Inbound -Protocol 41 -RemoteAddress 192.88.99.1 -Action Block
# - display the results
Get-NetFirewallRule -DisplayName "Block 6to4 Outbound"
Get-NetFirewallRule -DisplayName "Block 6to4 Outbound ICMP"
Get-NetFirewallRule -DisplayName "Block 6to4 Inbound"
# - disable the FW rule:
Disable-NetFirewallRule -DisplayName "Block 6to4 Outbound"
Disable-NetFirewallRule -DisplayName "Block 6to4 Outbound ICMP"
Disable-NetFirewallRule -DisplayName "Block 6to4 Inbound"
# - enable the FW rule:
Enable-NetFirewallRule -DisplayName "Block 6to4 Outbound"
Enable-NetFirewallRule -DisplayName "Block 6to4 Outbound ICMP"
Enable-NetFirewallRule -DisplayName "Block 6to4 Inbound"
# - finally remove the FW rule:
Remove-NetFirewallRule -DisplayName "Block 6to4 Outbound"
Remove-NetFirewallRule -DisplayName "Block 6to4 Outbound ICMP"
Remove-NetFirewallRule -DisplayName "Block 6to4 Inbound"
#
# - IPv6 FW rules to block ISATAP traffic
# - more specific rules can be built for this around isatap.domain-name but those would be specific for AD joined hosts
# - this rule will also block 6to4 traffic automatically making the above FW rule redundant but useful for tracking purposes
New-NetFirewallRule -DisplayName "Block ISATAP Outbound" -Direction Outbound -Protocol 41 -RemoteAddress Internet -Action Block
# - display the results
Get-NetFirewallRule -DisplayName "Block ISATAP Outbound"
# - disable the FW rule:
Disable-NetFirewallRule -DisplayName "Block ISATAP Outbound"
# - enable the FW rule:
Enable-NetFirewallRule -DisplayName "Block ISATAP Outbound"
# - remove the FW rule:
Remove-NetFirewallRule -DisplayName "Block ISATAP Outbound"
#
# - IPv6 FW rules to block Teredo traffic
New-NetFirewallRule -DisplayName "Block Teredo Outbound" -Direction Outbound -Protocol udp -LocalPort 3544 -RemoteAddress Internet -Action Block
# - display the results
Get-NetFirewallRule -DisplayName "Block Teredo Outbound"
# - disale the FW rule:
Disable-NetFirewallRule -DisplayName "Block Teredo Outbound"
# - enable the FW rule:
Enable-NetFirewallRule -DisplayName "Block Teredo Outbound"
# - remove the FW rule:
Remove-NetFirewallRule -DisplayName "Block Teredo Outbound"
#
# - a better way is to link the FW rule to the application for Teredo since the port can be dynamic
# - academic exercise to determine service name and build the rule
#
# - the actual built in client FW rule for 6to4 and ISATAP inbound are:
Disable-NetFirewallRule - Name CoreNet-IPv6-In
# - the actual built in FW rule for Teredo (UDP-In) are:
Disable-NetFirewallRule - Name CoreNet-Teredo-In
# - there are several others - academic exercise to find them all - simplier to add the specific deny rules
#
# - Windows 8 and Server 2012 already have the correct ICMP filter types in place but to show an example
# - finally, make sure to allow ICMPv6 per RFC4443 - so specifically allow the following codes:
New-NetFirewallRule -DisplayName "ICMPv6 RFC4443 135 In" -Direction Inbound -Protocol ICMPv6 -IcmpType 135
New-NetFirewallRule -DisplayName "ICMPv6 RFC4443 136 In" -Direction Inbound -Protocol ICMPv6 -IcmpType 136
#
#
# ----------------------------
# - Demo 3 run through script
# A powershell cmdlet that does the set up properly for the appropriate IPv6 configurations for the end system based on best practices.
# Store the existing configuration before changing and provide an option switch to revert back to old settings.
# The best practices will do:
# 1. - Turn off isatap
# 2. - Turn off teredo
# 3. - Turn off 6to4
#
